<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/02/01/9.%E7%BC%96%E5%86%99%E5%92%8C%E7%A7%BB%E6%A4%8D%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81/%E6%9E%84%E9%80%A0shellcode/"/>
      <url>/2023/02/01/9.%E7%BC%96%E5%86%99%E5%92%8C%E7%A7%BB%E6%A4%8D%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81/%E6%9E%84%E9%80%A0shellcode/</url>
      
        <content type="html"><![CDATA[<h4 id="msf生成shellcode"><a href="#msf生成shellcode" class="headerlink" title="msf生成shellcode"></a>msf生成shellcode</h4><ul><li>由于msf没有原生的Go格式。我们需要把常用的格式(C，hex，num，raw，Base64)转换成Go能使用的切片格式</li></ul><h5 id="C转换"><a href="#C转换" class="headerlink" title="C转换"></a>C转换</h5><ul><li>删除分号，并更改换行符。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload := []<span class="type">byte</span>(<span class="string">&quot;\xfc\xe8\x82...&quot;</span>).</span><br></pre></td></tr></table></figure><h5 id="hex转换"><a href="#hex转换" class="headerlink" title="hex转换"></a>hex转换</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload, err := hex.DecodeString(<span class="string">&quot;hex数据&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="num转换"><a href="#num转换" class="headerlink" title="num转换"></a>num转换</h5><ul><li>可以之间在字节切片中使用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload := []<span class="type">byte</span>&#123;</span><br><span class="line"><span class="number">0xfc</span>,<span class="number">0xe8</span>,<span class="number">0x82</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="raw转换"><a href="#raw转换" class="headerlink" title="raw转换"></a>raw转换</h4><ul><li>原生的二进制数据，会有不可见字符。我们将其转成num形式。可以使用Linux的xxd命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p [payload] [options] -f raw | xxd -i</span><br></pre></td></tr></table></figure><h5 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h5><ul><li>虽然msfvenom不含纯Base64编码器，但遇到Base64格式的二进制数据很常见</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p [payload][options]-f raw | <span class="built_in">base64</span></span><br></pre></td></tr></table></figure><ul><li>与C输出类似，生成的载荷包含换行符。需要进行处理，可以使用Linux</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p [payload][options]-f raw | base64 | tr -d <span class="string">&quot;\n&quot;</span></span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload, err := base64.strEncoding.DecodeString(<span class="string">&quot;base64&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="关于汇编"><a href="#关于汇编" class="headerlink" title="关于汇编"></a>关于汇编</h4><ul><li>谈及shellcode，离不开汇编。</li><li>但Go与汇编的集成是有限的；Go不支持内联汇编。Go仅支持基于Plan9操作系统的—种汇编变体，这种汇编语法几乎不存在。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/01/9.%E7%BC%96%E5%86%99%E5%92%8C%E7%A7%BB%E6%A4%8D%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%B0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%A7%BB%E6%A4%8D%E5%88%B0Go/"/>
      <url>/2023/02/01/9.%E7%BC%96%E5%86%99%E5%92%8C%E7%A7%BB%E6%A4%8D%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81/%E5%B0%86%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%A7%BB%E6%A4%8D%E5%88%B0Go/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>出于各种原因，我们可能需要将现有漏洞利用移植到Go中</li><li>其中原因可能是现有的利用代码已损坏、不完整或与你要针对的系统或版本不兼容</li><li>尽管你可以使用创建时使用的相同语言来扩展或更新已损坏或不完整的代码</li><li>但是G0可以为你提供轻松的交叉编译、一致的语法和缩进规则以及强大的标准库。</li><li>所有这一切都将使得利用代码具有更高的可移植性和可读性，而不会影响其功能。</li></ul><h4 id="从python移植"><a href="#从python移植" class="headerlink" title="从python移植"></a>从python移植</h4><p><img src="/picture/image-20230201141727592.png" alt="image-20230201141727592"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/01/9.%E7%BC%96%E5%86%99%E5%92%8C%E7%A7%BB%E6%A4%8D%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81/Fuzz/"/>
      <url>/2023/02/01/9.%E7%BC%96%E5%86%99%E5%92%8C%E7%A7%BB%E6%A4%8D%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81/Fuzz/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>模糊测试是一种将大量数据发送到目标应用程序，迫使目标产生异常行为的技术。进而发现编码错误或安全缺陷，并加以利用</li></ul><h4 id="缓冲区溢出FUZZ"><a href="#缓冲区溢出FUZZ" class="headerlink" title="缓冲区溢出FUZZ"></a>缓冲区溢出FUZZ</h4><ul><li>做过pwn题目的师傅们对栈溢出很熟悉。</li><li>q1和q2处需要注意。<ul><li>连接异常，可能中途服务中断。可能存在缓冲区溢出。但如果</li><li>如果建立连接后无法关闭连接，可能表示远程FTP服务突然异常断开。这可能不是溢出引起，记录异常情况，程序将继续执行</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;bufio&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2500</span>; i++ &#123; <span class="comment">//FUZZ 2500次</span></span><br><span class="line">      conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;10.0.1.20:21&quot;</span>) <span class="comment">//tcp连接</span></span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         log.Fatalf(<span class="string">&quot;[!] Error at offset %d: %s\n&quot;</span>, i, err) <span class="comment">//q1</span></span><br><span class="line">      &#125;</span><br><span class="line">      bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">//创建bufio缓冲去读响应内容。显示读取为一行</span></span><br><span class="line"></span><br><span class="line">      user := <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="keyword">for</span> n := <span class="number">0</span>; n &lt;= i; n++ &#123; <span class="comment">//要FUZZ测试的USER</span></span><br><span class="line">         user += <span class="string">&quot;A&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      raw := <span class="string">&quot;USER %s\n&quot;</span></span><br><span class="line">      fmt.Fprintf(conn, raw, user)           <span class="comment">//向目标FTP服务器发送USER命令，输入用户名</span></span><br><span class="line">      bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">      raw = <span class="string">&quot;PASS password\n&quot;</span></span><br><span class="line">      fmt.Fprint(conn, raw)                  <span class="comment">//向目标FTP服务器发送PASS命令，输入密码</span></span><br><span class="line">      bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> err := conn.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">         log.Println(<span class="string">&quot;[!] Unable to close connection. Is service alive?&quot;</span>) <span class="comment">//q2</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20230201133850967.png" alt="image-20230201133850967"></p><h5 id="改进："><a href="#改进：" class="headerlink" title="改进："></a>改进：</h5><ul><li>可以通过多种方式改进上述代码，以提高其灵活性和便利性。例如，你可能希望删除硬编码的P、端口和迭代值，而不是通过命令行参数或配置文件将其包括在内。你可以试着以此方式改进代码。此外，还可以扩展代码，以便在身份验证后对命令进行模糊测试。具体来说，可以更新该模糊测试器以对CWD&#x2F;CD命令进行模糊测试。各种工具历来都容易受到与处理CWD&#x2F;CD命令相关的缓冲区溢出的影响，这使得此命令成为模糊测试的一个好目标。</li></ul><h4 id="SQL注入模糊测试"><a href="#SQL注入模糊测试" class="headerlink" title="SQL注入模糊测试"></a>SQL注入模糊测试</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;bytes&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;regexp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   payloads := []<span class="type">string</span>&#123; <span class="comment">//要尝试的载荷</span></span><br><span class="line">      <span class="string">&quot;baseline&quot;</span>,</span><br><span class="line">      <span class="string">&quot;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;(&quot;</span>,</span><br><span class="line">      <span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#x27;&quot;</span>,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   sqlErrors := []<span class="type">string</span>&#123; <span class="comment">//SQL错误信息中的关键字</span></span><br><span class="line">      <span class="string">&quot;SQL&quot;</span>,</span><br><span class="line">      <span class="string">&quot;MySQL&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ORA-&quot;</span>,</span><br><span class="line">      <span class="string">&quot;syntax&quot;</span>,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   errRegexes := []*regexp.Regexp&#123;&#125; <span class="comment">//1.构建正则切片errRegexes</span></span><br><span class="line">   <span class="keyword">for</span> _, e := <span class="keyword">range</span> sqlErrors &#123;</span><br><span class="line">      re := regexp.MustCompile(fmt.Sprintf(<span class="string">&quot;.*%s.*&quot;</span>, e))</span><br><span class="line">      errRegexes = <span class="built_in">append</span>(errRegexes, re)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> _, payload := <span class="keyword">range</span> payloads &#123; <span class="comment">//2.遍历每个载荷</span></span><br><span class="line">      client := <span class="built_in">new</span>(http.Client)</span><br><span class="line">      body := []<span class="type">byte</span>(fmt.Sprintf(<span class="string">&quot;username=%s&amp;password=p&quot;</span>, payload)) <span class="comment">//2.1构造完整载荷</span></span><br><span class="line">      req, err := http.NewRequest(                                   <span class="comment">//2.2构建POST请求</span></span><br><span class="line">         <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">         <span class="string">&quot;http://10.0.1.20:8080/WebApplication/login.jsp?debug=true&quot;</span>,</span><br><span class="line">         bytes.NewReader(body),</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         log.Fatalf(<span class="string">&quot;[!] Unable to generate request: %s\n&quot;</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">      req.Header.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>) <span class="comment">//2.3添加Header</span></span><br><span class="line">      resp, err := client.Do(req)                                         <span class="comment">//2.4发送HTTP请求</span></span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         log.Fatalf(<span class="string">&quot;[!] Unable to process response: %s\n&quot;</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">      body, err = ioutil.ReadAll(resp.Body) <span class="comment">//2.5读取响应内容</span></span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         log.Fatalf(<span class="string">&quot;[!] Unable to read response body: %s\n&quot;</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">      resp.Body.Close() <span class="comment">//2.6关闭连接</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> idx, re := <span class="keyword">range</span> errRegexes &#123; <span class="comment">//3.遍历HTTP响应内容是否命中errRegexes</span></span><br><span class="line">         <span class="keyword">if</span> re.MatchString(<span class="type">string</span>(body)) &#123;</span><br><span class="line">            fmt.Printf(</span><br><span class="line">               <span class="string">&quot;[+] SQL Error found (&#x27;%s&#x27;) for payload: %s\n&quot;</span>,</span><br><span class="line">               sqlErrors[idx],</span><br><span class="line">               payload,</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/picture/image-20230201141058178.png" alt="image-20230201141058178"></p><ul><li>书中还提到了代码功能的改进和添加</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go</title>
      <link href="/2023/02/01/Go/"/>
      <url>/2023/02/01/Go/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/01/hello-world/"/>
      <url>/2023/02/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
